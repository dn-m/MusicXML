{# A template to generate basic coding keys #}
{# Example: $sourcery --sources Complex\ Types/Accidental.swift --templates
Templates/DynamicNodeEncoding.stencil --output Output/ #}
{% for type in types.structs %}
// sourcery:inline:{{ type.name }}.DynamicNodeEncoding
extension {{ type.name }}: DynamicNodeEncoding {
    public static func nodeEncoding(for key: CodingKey) -> XMLEncoder.NodeEncoding {
        switch key {
        {% for attribute in type.storedVariables|annotated:"attribute" %}
        case .{{ attribute.name }}:
            return .attribute
        {% endfor %}
        {% for attribute in type.storedVariables %}
            {% if attribute.type.based.AttributeGroup %}
        case _ as {{ attribute.type.name }}.CodingKeys:

(key is BendSound.CodingKeys ||
key is Bezier.CodingKeys ||
key is DashedFormatting.CodingKeys ||
key is Font.CodingKeys ||
key is LevelDisplay.CodingKeys ||
key is PlacementPrintStyle.CodingKeys ||
key is Position.CodingKeys ||
key is Printout.CodingKeys ||
key is PrintStyle.CodingKeys ||
key is PrintStyleAlign.CodingKeys ||
key is PrintStyleAlignObject.CodingKeys ||
key is PrintStyleTrillSound.CodingKeys ||
key is TextDecoration.CodingKeys ||
key is TrillSound.CodingKeys)
            return .attribute
            {% endif %}
        {% endfor %}
        default:
            return .element
        }
    }
}
// sourcery:end

{% endfor %}
