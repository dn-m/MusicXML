{# A template to generate basic coding keys #}
{# Example: $sourcery --sources Complex\ Types/Accidental.swift --templates
Templates/DynamicNodeEncoding.stencil --output Output/ #}
{% for type in types.structs %}
// sourcery:inline:{{ type.name }}.DynamicNodeEncoding
extension {{ type.name }}: DynamicNodeEncoding {
    public static func nodeEncoding(for key: CodingKey) -> XMLEncoder.NodeEncoding {
        if key is XMLAttributeGroupCodingKey {
            return .attribute
        }
{% set attributeCount %}
{% for attribute in type.storedVariables|annotated:"attribute" %}
{% if forloop.last %}{{ forloop.counter }}{% endif %}
{% endfor %}
{% endset %}
{% if attributeCount == 0 %}
    return .element
{% else %}
        {% for attribute in type.storedVariables|annotated:"attribute" %}
        {% if forloop.first %}
        switch key {
        {% endif %}
        case CodingKeys.{{ attribute.name }}:
            return .attribute
        {% if forloop.last %}
        default:
            return .element
        }
        {% endif %}
        {% endfor %}
{% endif %}
    }
}
// sourcery:end

{% endfor %}
